
-- Create a temp table to store the row quantity of each table in “loandb” and the temp table
-- includes 2 columns, one is “table_name” and the other is “row_quantity.” Show the table
-- in the end. After take a screenshot of the result, then, drop the table.

CREATE TEMPORARY TABLE dsstudent.loan_db_row_counts (
	table_name VARCHAR (40),
	row_quantity INT);

INSERT INTO dsstudent.loan_db_row_counts 
	(table_name, row_quantity)
SELECT 'train', (SELECT COUNT(*) FROM loandb.train)
UNION ALL
SELECT 'bureau', (SELECT COUNT(*) FROM loandb.bureau)
UNION ALL
SELECT 'bureau_balance', (SELECT COUNT(*) FROM loandb.bureau_balance)
UNION ALL
SELECT 'previous_application', (SELECT COUNT(*) FROM loandb.previous_application)
UNION ALL
SELECT 'installments_payments', (SELECT COUNT(*) FROM loandb.installments_payments)
UNION ALL
SELECT 'POS_CASH_balance', (SELECT COUNT(*) FROM loandb.POS_CASH_balance)
UNION ALL
SELECT 'credit_card_balance', (SELECT COUNT(*) FROM loandb.credit_card_balance);


SELECT *
from dsstudent.loan_db_row_counts

DROP TABLE dsstudent.loan_db_row_counts

-- Show the monthly and annual income

SELECT AMT_INCOME_TOTAL as 'annual_income', AMT_INCOME_TOTAL / 12 as 'monthly_income'
from train

-- Transform the “DAYS_BIRTH” column by dividing “-365” and round the value to the integer place.
-- Call this column as “age.”

SELECT ROUND(DAYS_BIRTH / -365, 0) as 'age'
from train

-- Show the quantity of each occupation type and sort the quantity in descending order
-- Do not include the null values in the returned set.

SELECT OCCUPATION_TYPE as occupation_type, COUNT(*) as quantity
from train
WHERE occupation_type IS NOT NULL
group by occupation_type
order by quantity desc

-- In the field “DAYS_EMPLOYED”, the maximum value in this field is bad data, can you write
-- a conditional logic to mark these bad data as “bad data”, and other values are “normal data”
-- in a new field called “Flag_for_bad_data”?

SELECT DAYS_EMPLOYED,
CASE
	WHEN DAYS_EMPLOYED = (SELECT MAX(DAYS_EMPLOYED) from train) then 'bad data'
	ELSE 'normal data'
END as Flag_for_bad_data
FROM train;

-- Can you show the minimum and maximum values for both “DAYS_INSTALLMENT” & “DAYS_ENTRY_PAYMENT”
-- fields in the “installment_payments” table for default v.s. non-default groups of clients?
	
SELECT t.TARGET,
	MIN(DAYS_INSTALMENT) as min_day_installment,
	MAX(DAYS_INSTALMENT) as max_day_installment,
	MIN(DAYS_ENTRY_PAYMENT) as min_days_entry_payment,
	MAX(DAYS_ENTRY_PAYMENT) as max_days_entry_payment
	from train as t
	LEFT JOIN installments_payments as ip
	on t.SK_ID_CURR = ip.SK_ID_CURR
	LEFT JOIN credit_card_balance as ccb
	on t.SK_ID_CURR = ccb.SK_ID_CURR
	LEFT JOIN previous_application as pa 
	on t.SK_ID_CURR = pa.SK_ID_CURR
	GROUP BY t.TARGET

